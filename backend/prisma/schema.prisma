generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ai_models {
  id         Int      @id @default(autoincrement())
  model_id   String   @unique @db.VarChar(100)
  name       String   @db.VarChar(100)
  provider   String   @db.VarChar(50)
  category   String   @db.VarChar(50)
  is_active  Boolean  @default(true)
  priority   Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime
}

model announcements {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(200)
  content    String    @db.Text
  is_active  Boolean   @default(true)
  priority   Int       @default(0)
  show_style String    @default("info") @db.VarChar(20)
  start_time DateTime?
  end_time   DateTime?
  created_by Int?
  created_at DateTime  @default(now())
  updated_at DateTime

  @@index([end_time])
  @@index([is_active])
  @@index([priority])
  @@index([start_time])
}

model email_verification_codes {
  id         Int      @id @default(autoincrement())
  email      String   @db.VarChar(100)
  code       String   @db.VarChar(10)
  token      String   @unique @db.VarChar(255)
  expires_at DateTime
  is_used    Boolean  @default(false)
  created_at DateTime @default(now())
}

model invite_records {
  id                                     Int      @id @default(autoincrement())
  inviter_id                             Int
  invitee_id                             Int      @unique
  invite_code                            String   @db.VarChar(20)
  status                                 String   @default("REGISTERED") @db.VarChar(20)
  first_recharge_amount                  Decimal  @default(0.00) @db.Decimal(10, 2)
  commission_amount                      Decimal  @default(0.00) @db.Decimal(10, 2)
  commission_status                      String   @default("PENDING") @db.VarChar(20)
  created_at                             DateTime @default(now())
  updated_at                             DateTime
  users_invite_records_invitee_idTousers users    @relation("invite_records_invitee_idTousers", fields: [invitee_id], references: [id], onDelete: Cascade)
  users_invite_records_inviter_idTousers users    @relation("invite_records_inviter_idTousers", fields: [inviter_id], references: [id], onDelete: Cascade)

  @@index([inviter_id])
  @@index([status])
}

model invite_rewards {
  id                                     Int      @id @default(autoincrement())
  inviter_id                             Int
  invitee_id                             Int
  reward_type                            String   @db.VarChar(20)
  reward_amount                          Int
  description                            String?  @db.Text
  status                                 String   @default("GRANTED") @db.VarChar(20)
  created_at                             DateTime @default(now())
  updated_at                             DateTime
  users_invite_rewards_invitee_idTousers users    @relation("invite_rewards_invitee_idTousers", fields: [invitee_id], references: [id], onDelete: Cascade)
  users_invite_rewards_inviter_idTousers users    @relation("invite_rewards_inviter_idTousers", fields: [inviter_id], references: [id], onDelete: Cascade)

  @@index([invitee_id], map: "invite_rewards_invitee_id_fkey")
  @@index([inviter_id])
  @@index([reward_type])
  @@index([status])
}

model model_point_configs {
  id            Int                               @id @default(autoincrement())
  model_name    String                            @db.VarChar(100)
  question_type model_point_configs_question_type
  cost          Int
  is_active     Boolean                           @default(true)
  description   String?                           @db.Text
  created_at    DateTime                          @default(now())
  updated_at    DateTime

  @@unique([model_name, question_type])
}

model payment_notify_logs {
  id              Int                                @id @default(autoincrement())
  order_no        String                             @db.VarChar(64)
  payment_method  payment_notify_logs_payment_method
  notify_type     String                             @db.VarChar(50)
  request_body    String                             @db.Text
  request_headers String?                            @db.Text
  response_status Int                                @default(200)
  process_status  payment_notify_logs_process_status @default(pending)
  error_message   String?                            @db.Text
  process_time    DateTime?
  retry_count     Int                                @default(0)
  created_at      DateTime                           @default(now())

  @@index([created_at])
  @@index([order_no])
  @@index([process_status])
}

model payment_orders {
  id               Int                           @id @default(autoincrement())
  order_no         String                        @unique @db.VarChar(64)
  out_trade_no     String                        @unique @db.VarChar(64)
  user_id          Int
  amount           Decimal                       @db.Decimal(10, 2)
  points           Int
  bonus_points     Int                           @default(0)
  payment_method   payment_orders_payment_method
  payment_status   payment_orders_payment_status @default(pending)
  transaction_id   String?                       @db.VarChar(64)
  payment_time     DateTime?
  notify_time      DateTime?
  expire_time      DateTime
  package_id       Int?
  metadata         String?                       @db.Text
  fail_reason      String?                       @db.Text
  created_at       DateTime                      @default(now())
  updated_at       DateTime
  payment_packages payment_packages?             @relation(fields: [package_id], references: [id])
  users            users                         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([order_no])
  @@index([package_id], map: "payment_orders_package_id_fkey")
  @@index([payment_status])
  @@index([user_id])
}

model payment_packages {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  description    String?          @db.Text
  amount         Decimal          @db.Decimal(10, 2)
  points         Int
  bonus_points   Int              @default(0)
  is_active      Boolean          @default(true)
  sort_order     Int              @default(0)
  icon           String?          @db.VarChar(255)
  is_recommended Boolean          @default(false)
  created_at     DateTime         @default(now())
  updated_at     DateTime
  label          String?          @db.VarChar(50)
  label_color    String?          @db.VarChar(20)
  payment_orders payment_orders[]

  @@index([is_active])
  @@index([is_recommended])
  @@index([sort_order])
}

model point_transactions {
  id               Int                                 @id @default(autoincrement())
  user_id          Int
  transaction_type point_transactions_transaction_type
  amount           Int
  balance_after    Int
  model_name       String?                             @db.VarChar(100)
  question_type    point_transactions_question_type?
  description      String?                             @db.Text
  metadata         String?                             @db.Text
  created_at       DateTime                            @default(now())
  users            users                               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "point_transactions_user_id_fkey")
}

model redis_sessions {
  id         Int      @id @default(autoincrement())
  session_id String   @unique @db.VarChar(100)
  user_id    Int?
  data       String   @db.Text
  expires_at DateTime
  created_at DateTime @default(now())
}

model usage_records {
  id          Int      @id @default(autoincrement())
  user_id     Int
  action      String   @db.VarChar(50)
  model       String   @db.VarChar(100)
  provider    String   @db.VarChar(50)
  tokens_used Int?
  success     Boolean  @default(true)
  error_msg   String?  @db.Text
  created_at  DateTime @default(now())
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "usage_records_user_id_fkey")
}

model user_configs {
  id                    Int      @id @default(autoincrement())
  user_id               Int      @unique
  programming_model     String   @default("claude-sonnet-4-20250514") @db.VarChar(100)
  multiple_choice_model String   @default("claude-sonnet-4-20250514") @db.VarChar(100)
  ai_model              String?  @default("claude-sonnet-4-20250514") @db.VarChar(100)
  selected_provider     String   @default("claude") @db.VarChar(50)
  extraction_model      String?  @default("claude-sonnet-4-20250514") @db.VarChar(100)
  solution_model        String?  @default("claude-sonnet-4-20250514") @db.VarChar(100)
  debugging_model       String?  @default("claude-sonnet-4-20250514") @db.VarChar(100)
  language              String   @default("python") @db.VarChar(50)
  theme                 String   @default("system") @db.VarChar(20)
  opacity               Float    @default(1)
  show_copy_button      Boolean  @default(true)
  shortcuts             String?  @db.Text
  display               String?  @db.Text
  processing            String?  @db.Text
  created_at            DateTime @default(now())
  updated_at            DateTime
  users                 users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_sessions {
  id            Int      @id @default(autoincrement())
  user_id       Int
  token         String   @unique @db.VarChar(255)
  refresh_token String   @unique @db.VarChar(255)
  expires_at    DateTime
  created_at    DateTime @default(now())
  is_active     Boolean  @default(true)
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "user_sessions_user_id_fkey")
}

model users {
  id                                              Int                  @id @default(autoincrement())
  username                                        String               @unique @db.VarChar(50)
  email                                           String?              @unique @db.VarChar(100)
  password                                        String               @db.VarChar(255)
  role                                            users_role           @default(user)
  isActive                                        Boolean              @default(true)
  points                                          Int                  @default(100)
  invite_code                                     String?              @unique @db.VarChar(20)
  inviter_id                                      Int?
  invited_at                                      DateTime?
  created_at                                      DateTime             @default(now())
  updated_at                                      DateTime
  invite_records_invite_records_invitee_idTousers invite_records?      @relation("invite_records_invitee_idTousers")
  invite_records_invite_records_inviter_idTousers invite_records[]     @relation("invite_records_inviter_idTousers")
  invite_rewards_invite_rewards_invitee_idTousers invite_rewards[]     @relation("invite_rewards_invitee_idTousers")
  invite_rewards_invite_rewards_inviter_idTousers invite_rewards[]     @relation("invite_rewards_inviter_idTousers")
  payment_orders                                  payment_orders[]
  point_transactions                              point_transactions[]
  usage_records                                   usage_records[]
  user_configs                                    user_configs?
  user_sessions                                   user_sessions[]
}

enum model_point_configs_question_type {
  multiple_choice
  programming
}

enum payment_notify_logs_payment_method {
  wechat_pay
  alipay
}

enum point_transactions_transaction_type {
  consume
  recharge
  refund
  reward
}

enum users_role {
  user
  admin
}

enum point_transactions_question_type {
  multiple_choice
  programming
}

enum payment_notify_logs_process_status {
  pending
  success
  failed
}

enum payment_orders_payment_method {
  wechat_pay
  alipay
}

enum payment_orders_payment_status {
  pending
  paid
  failed
  cancelled
  refunded
  expired
}
