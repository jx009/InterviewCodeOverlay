name: Build and Release

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      draft:
        description: 'Create draft release'
        required: false
        default: true
        type: boolean
  
  # 当推送tag时自动触发
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Package for macOS
      if: matrix.os == 'macos-latest'
      run: npm run package-mac
      env:
        NODE_ENV: production
        
    - name: Package for Windows
      if: matrix.os == 'windows-latest'
      run: npm run package-win
      env:
        NODE_ENV: production
        
    - name: Package for Linux
      if: matrix.os == 'ubuntu-latest'
      run: npm run package
      env:
        NODE_ENV: production
        
    # 上传构建产物
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          release/*.dmg
          release/*.zip
          
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: release/*.exe
        
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: release/*.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-assets
        
    - name: Display structure of downloaded files
      run: ls -la release-assets/
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: Release ${{ github.event.inputs.version || github.ref_name }}
        draft: ${{ github.event.inputs.draft == 'true' || false }}
        prerelease: false
        body: |
          ## 更新内容
          
          - 新功能和改进
          - Bug修复
          
          ## 下载说明
          
          - **macOS**: 下载 `.dmg` 文件 (Intel: x64, Apple Silicon: arm64)
          - **Windows**: 下载 `.exe` 文件
          - **Linux**: 下载 `.AppImage` 文件
          
          ## 安装说明
          
          ### macOS
          1. 下载对应架构的 `.dmg` 文件
          2. 双击打开并拖拽到 Applications 文件夹
          3. 首次运行可能需要在系统偏好设置中允许运行
          
          ### Windows
          1. 下载 `.exe` 文件
          2. 双击运行安装程序
          3. Windows Defender 可能会提示，选择"仍要运行"
          
          ### Linux
          1. 下载 `.AppImage` 文件
          2. 添加执行权限: `chmod +x *.AppImage`
          3. 直接运行: `./Interview-Coder-*.AppImage`
        
    # 上传 macOS 构建产物
    - name: Upload macOS DMG (x64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/macos-builds/Interview-Coder-x64.dmg
        asset_name: Interview-Coder-macOS-x64.dmg
        asset_content_type: application/octet-stream
      continue-on-error: true
        
    - name: Upload macOS DMG (arm64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/macos-builds/Interview-Coder-arm64.dmg
        asset_name: Interview-Coder-macOS-arm64.dmg
        asset_content_type: application/octet-stream
      continue-on-error: true
        
    - name: Upload macOS ZIP (x64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/macos-builds/Interview-Coder-x64.zip
        asset_name: Interview-Coder-macOS-x64.zip
        asset_content_type: application/zip
      continue-on-error: true
        
    - name: Upload macOS ZIP (arm64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/macos-builds/Interview-Coder-arm64.zip
        asset_name: Interview-Coder-macOS-arm64.zip
        asset_content_type: application/zip
      continue-on-error: true
        
    # 上传 Windows 构建产物
    - name: Upload Windows installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/windows-builds/QuizCoze 2025.08.17-Windows-2025.08.17.exe
        asset_name: Interview-Coder-Windows.exe
        asset_content_type: application/octet-stream
      continue-on-error: true
        
    # 上传 Linux 构建产物
    - name: Upload Linux AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/linux-builds/QuizCoze 2025.08.17-Linux-2025.08.17.AppImage
        asset_name: Interview-Coder-Linux.AppImage
        asset_content_type: application/octet-stream
      continue-on-error: true