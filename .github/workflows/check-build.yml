name: 🧪 Build Check

# 轻量级构建检查，用于PR和推送验证
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: 18

jobs:
  # 快速构建验证
  build-check:
    name: 🔍 Quick Build Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚚 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔍 Lint check
        run: npm run lint || echo "Lint check completed with warnings"
        continue-on-error: true
        
      - name: 🧪 Run tests
        run: npm test
        continue-on-error: true
        
      - name: 🔧 Build application
        run: npm run build
        
      - name: ✅ Build success
        run: echo "✅ Build completed successfully"

  # 检查package.json配置
  package-check:
    name: 📋 Package Configuration Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚚 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📋 Check package.json
        run: |
          echo "=== Package Information ==="
          node -p "JSON.stringify(require('./package.json'), ['name', 'version', 'description', 'main', 'author'], 2)"
          
          echo ""
          echo "=== Build Configuration ==="
          node -p "JSON.stringify(require('./package.json').build, null, 2)" || echo "No build configuration found"
          
          echo ""
          echo "=== Build Scripts ==="
          node -p "JSON.stringify(require('./package.json').scripts, null, 2)"
          
      - name: 🔍 Validate electron-builder config
        run: |
          node -e "
          const pkg = require('./package.json');
          const errors = [];
          
          // 检查必要字段
          if (!pkg.main) errors.push('Missing main field');
          if (!pkg.build) errors.push('Missing build configuration');
          if (!pkg.build.appId) errors.push('Missing build.appId');
          
          // 检查构建脚本
          if (!pkg.scripts.build) errors.push('Missing build script');
          if (!pkg.scripts['package-win']) errors.push('Missing package-win script');
          if (!pkg.scripts['package-mac']) errors.push('Missing package-mac script');
          
          if (errors.length > 0) {
            console.log('❌ Configuration errors:');
            errors.forEach(err => console.log('  - ' + err));
            process.exit(1);
          } else {
            console.log('✅ Package configuration is valid');
          }
          "
          
  # 检查资源文件
  assets-check:
    name: 📁 Assets Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚚 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🖼️ Check icon files
        run: |
          echo "=== Checking icon files ==="
          
          # 检查Windows图标
          if [ -f "assets/icons/win/logo_qz.ico" ]; then
            echo "✅ Windows icon found"
            ls -la assets/icons/win/logo_qz.ico
          else
            echo "⚠️ Windows icon not found: assets/icons/win/logo_qz.ico"
          fi
          
          # 检查macOS图标
          if [ -f "assets/icons/mac/logo_qz.icns" ]; then
            echo "✅ macOS icon found"
            ls -la assets/icons/mac/logo_qz.icns
          else
            echo "⚠️ macOS icon not found: assets/icons/mac/logo_qz.icns"
          fi
          
      - name: 📁 Check build directories
        run: |
          echo "=== Build directories ==="
          ls -la || true
          
          echo ""
          echo "=== Source directories ==="
          ls -la src/ electron/ || true