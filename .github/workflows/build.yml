name: 🚀 Build and Release Electron App

# 触发条件
on:
  push:
    branches: [ main, master, test1 ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, test1 ]
  workflow_dispatch:

# 环境变量
env:
  NODE_VERSION: 18
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  # 构建和打包任务
  build:
    name: 🔨 Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        
    steps:
      - name: 🚚 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Setup Python (for native modules)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: 🍎 Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          # 安装macOS构建依赖
          python -m pip install setuptools
          
      - name: 🪟 Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # 安装Windows构建依赖
          echo "Using built-in Windows build tools"
          
      - name: 🧹 Clean problematic files
        run: |
          # Remove any problematic files
          find . -name "nul" -type f -delete 2>/dev/null || true
          rm -f nul 2>/dev/null || true
          rm -f backend/nul 2>/dev/null || true
        shell: bash
        
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🧪 Run tests (if available)
        run: npm test || echo "Tests completed"
        continue-on-error: true
        
      - name: 🔧 Build application
        run: npm run build
        
      - name: 📱 Package Windows app
        if: matrix.os == 'windows-latest'
        run: npm run package-win
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder
          
      - name: 🍎 Disable macOS code signing
        if: matrix.os == 'macos-latest'
        run: |
          # 清除所有可能导致签名的环境变量
          unset CSC_LINK 2>/dev/null || true
          unset CSC_KEY_PASSWORD 2>/dev/null || true
          unset APPLE_ID 2>/dev/null || true
          unset APPLE_APP_SPECIFIC_PASSWORD 2>/dev/null || true
          unset APPLE_TEAM_ID 2>/dev/null || true
          # 设置禁用签名的环境变量
          export CSC_IDENTITY_AUTO_DISCOVERY=false
          # 清空keychain中的所有证书
          security delete-keychain login.keychain 2>/dev/null || true
          echo "✅ Code signing disabled"
          
      - name: 🍎 Package macOS app
        if: matrix.os == 'macos-latest'
        run: npm run package-mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder
          
      - name: 📤 Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            release/**/*.exe
            release/**/*.nsis.7z
            release/**/*.yml
          retention-days: 1
          
      - name: 📤 Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            release/**/*.dmg
            release/**/*.zip
            release/**/*.yml
          retention-days: 1
        
  # 创建GitHub Release（仅在推送tag时触发）
  release:
    name: 🚀 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: 🚚 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📥 Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./release-assets/windows/
          
      - name: 📥 Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: ./release-assets/macos/
          
      - name: 📋 Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          
      - name: 📝 Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          cat > release_notes.md << EOF
          ## 🎉 Interview Coder $VERSION
          
          ### 📦 下载安装包
          
          #### Windows 用户
          - **安装包**: \`Interview-Coder-Windows-*.exe\` (推荐)
          - 支持 Windows 10/11 (64位)
          
          #### macOS 用户  
          - **DMG安装包**: \`Interview-Coder-*.dmg\` (推荐)
          - **ZIP压缩包**: \`Interview-Coder-*.zip\`
          - 支持 macOS 10.14+ (Intel 和 Apple Silicon)
          
          ### 🔧 安装说明
          
          **Windows:**
          1. 下载 .exe 安装文件
          2. 右键选择"以管理员身份运行"
          3. 首次运行可能需要点击"更多信息" → "仍要运行"
          4. 安装完成后使用 \`Ctrl+B\` 切换窗口可见性
          
          **macOS:**
          1. 下载 .dmg 文件
          2. 双击打开，将应用拖入 Applications 文件夹
          3. 首次运行需要在"系统偏好设置" → "安全性与隐私"中允许
          4. 使用 \`Cmd+B\` 切换窗口可见性
          
          ### ⚡ 功能特性
          - 🔍 智能代码分析和题目解答
          - 🎯 隐身模式，面试时不被发现  
          - 📸 自动截图和处理
          - 🌐 Web端和客户端数据同步
          - 🔒 安全的用户认证系统
          
          ### 🛠️ 快捷键
          - \`Ctrl+B\` / \`Cmd+B\`: 切换窗口可见性
          - \`Ctrl+H\`: 截图
          - \`Ctrl+Enter\`: 处理截图
          - \`Ctrl+Q\`: 退出应用
          
          ### ⚠️ 重要提示
          - 请确保网络连接正常
          - 首次使用需要注册账户
          - 建议在正式面试前先熟悉操作
          
          ---
          **完整更新日志请查看 [提交历史](https://github.com/\${{ github.repository }}/commits)**
          EOF
          
      - name: 🏷️ List release assets
        run: |
          echo "=== Windows Build Assets ==="
          find ./release-assets/windows/ -type f -name "*.exe" -o -name "*.zip" | head -10
          echo ""
          echo "=== macOS Build Assets ==="
          find ./release-assets/macos/ -type f -name "*.dmg" -o -name "*.zip" | head -10
          
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Interview Coder ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
          files: |
            ./release-assets/**/*.exe
            ./release-assets/**/*.dmg
            ./release-assets/**/*.zip
            ./release-assets/**/*.yml
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}